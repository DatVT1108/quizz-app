{"version":3,"file":"static/js/730.3d7f7d23.chunk.js","mappings":"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","sources":["components/QuizListItem.js","utils/shuffleArray.js","components/QuizList.js","pages/QuizCreate.js"],"sourcesContent":["import { Button } from \"@material-tailwind/react\";\r\nimport he from \"he\";\r\nimport Loading from \"./Loading\";\r\n\r\nexport default function QuizListItem({\r\n  options,\r\n  question,\r\n  selectedOption,\r\n  setSelectedOption,\r\n  correctOption,\r\n}) {\r\n  let renderedOptions;\r\n\r\n  if (!options || options.length === 0) {\r\n    renderedOptions = <Loading />;\r\n  } else {\r\n    renderedOptions = options.map((option) => {\r\n      let optionClass = \"h-10\";\r\n      optionClass +=\r\n        selectedOption === option ? \" bg-green-300 text-white\" : \"\";\r\n      if (correctOption) {\r\n        if (correctOption === option) {\r\n          optionClass += \" bg-green-500 text-white\";\r\n        } \r\n\r\n        if(correctOption !== selectedOption && selectedOption === option) {\r\n          optionClass += \" bg-red-500 text-white\";\r\n        }\r\n      }\r\n      return (\r\n        <Button\r\n          className={optionClass}\r\n          variant=\"outlined\"\r\n          color=\"green\"\r\n          key={option}\r\n          onClick={setSelectedOption ? () => setSelectedOption(option) : undefined}\r\n        >\r\n          {he.decode(option)}\r\n        </Button>\r\n      );\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div className=\"flex flex-col gap-2 mt-4\">\r\n      <p className=\"font-bold text-xl\">{he.decode(question)}</p>\r\n      <div className=\"flex flex-row gap-2 items-center justify-start\">\r\n        {renderedOptions}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","export const shuffleArray = (array) => {\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n        const j = Math.floor(Math.random() * (i + 1));\r\n        [array[i], array[j]] = [array[j], array[i]];\r\n    }\r\n    return array;\r\n}","import QuizListItem from \"./QuizListItem\";\r\nimport Loading from \"../components/Loading\";\r\nimport { Button } from \"@material-tailwind/react\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport {shuffleArray} from \"../utils/shuffleArray\"\r\nimport { useDispatch } from \"react-redux\";\r\nimport { setQuizzies } from \"../store/slices/quizSlice\";\r\n\r\nexport default function QuizList({ isLoading, isError, quizzes }) {\r\n  // Navigation\r\n  const navigate = useNavigate();\r\n\r\n  // Dispatcher\r\n  const dispatch = useDispatch()\r\n\r\n  // Handle selected options\r\n  const [selectedOptions, setSelectedOptions] = useState({});\r\n\r\n  const handleOptionSelect = (index, option) => {\r\n    setSelectedOptions((prevSelectedOptions) => ({\r\n      ...prevSelectedOptions,\r\n      [index]: option,\r\n    }));\r\n  };\r\n\r\n  let selectedCount = Object.keys(selectedOptions).length;\r\n\r\n  // Handling random options\r\n  const [quizWithRandomOptions, setQuizWithRandomOptions] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (quizzes && quizzes.length !== 0) {\r\n      setQuizWithRandomOptions(() => {\r\n        const newQuizzes = [];\r\n  \r\n        for (const quiz of quizzes) {\r\n          const options = [quiz.correct_answer, ...quiz.incorrect_answers];\r\n          const shuffledOptions = shuffleArray(options);\r\n          newQuizzes.push(shuffledOptions);\r\n        }\r\n  \r\n        return newQuizzes;\r\n      });\r\n    }\r\n\r\n    return () => setSelectedOptions({});\r\n  }, [quizzes])\r\n\r\n  // Render quizzies\r\n  let renderedQuizzes;\r\n\r\n  if (isLoading) {\r\n    renderedQuizzes = <Loading></Loading>;\r\n  } else if (isError) {\r\n    renderedQuizzes = <div>Error loading quizzes</div>;\r\n  } else {\r\n    renderedQuizzes = quizzes.map((quiz, index) => {\r\n      return (\r\n        <QuizListItem\r\n          options={quizWithRandomOptions[index]}\r\n          question={quiz.question}\r\n          key={index}\r\n          selectedOption={selectedOptions[index] || null}\r\n          setSelectedOption={(option) => handleOptionSelect(index, option)}\r\n        ></QuizListItem>\r\n      );\r\n    });\r\n  }\r\n\r\n  // Handle submit\r\n  const handleSubmitQuiz = () => {\r\n    // Save into store\r\n    const quizziesWithRandomOptions = quizzes.map((quiz, index) => {\r\n      return {...quiz, options: quizWithRandomOptions[index], selected_answer: selectedOptions[index] }\r\n    })\r\n    dispatch(setQuizzies(quizziesWithRandomOptions))\r\n\r\n    // Navigate into result page\r\n    navigate(\"/result\");\r\n  }\r\n\r\n  return (\r\n    <div className=\"w-full flex flex-col gap-5\">\r\n      {renderedQuizzes}\r\n      <div className=\"flex\">\r\n        {(selectedCount === quizzes?.length) && (\r\n          <Button className=\"mt-4 mx-auto bg-gray-800 w-28\" onClick={handleSubmitQuiz}>\r\n            Submit\r\n          </Button>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { Select, Option } from \"@material-tailwind/react\";\r\nimport { useState } from \"react\";\r\nimport QuizList from \"../components/QuizList\";\r\nimport { useFetchCategoriesQuery, useLazyFetchQuizQuery } from \"../store\";\r\nimport { DIFFICULTY_SELECT_LIST } from \"../utils/constanst\";\r\n\r\nexport default function QuizCreate() {\r\n  const [category, setCategory] = useState(\"\");\r\n  const [difficulty, setDifficulty] = useState(\"\");\r\n  const [isChoosedCategory, setIsChoosedCategory] = useState(true);\r\n  const [isChoosedDifficulty, setIsChoosedDifficulty] = useState(true);\r\n\r\n  let renderedCategories;\r\n  let renderedDifficulties = DIFFICULTY_SELECT_LIST.map((difficulty) => {\r\n    return (\r\n      <Option value={difficulty.value} key={difficulty.value}>\r\n        {difficulty.option}\r\n      </Option>\r\n    );\r\n  });\r\n\r\n  const { data, error, isLoading } = useFetchCategoriesQuery();\r\n\r\n  if (isLoading) {\r\n    renderedCategories = <div>Loading category</div>;\r\n  } else if (error) {\r\n    renderedCategories = <div>Error load category</div>;\r\n  } else {\r\n    renderedCategories = data.trivia_categories.map((category) => {\r\n      return (\r\n        <Option value={`` + category.id} key={category.id}>\r\n          {category.name}\r\n        </Option>\r\n      );\r\n    });\r\n  }\r\n\r\n  const [fetchQuiz, fetchQuizResult] = useLazyFetchQuizQuery();\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    let isValid = true;\r\n\r\n    if (!category) {\r\n      setIsChoosedCategory(false);\r\n      isValid = false;\r\n    }\r\n\r\n    if (!difficulty) {\r\n      setIsChoosedDifficulty(false);\r\n      isValid = false;\r\n    }\r\n\r\n    if (isValid) {\r\n      fetchQuiz({\r\n        category,\r\n        difficulty,\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex flex-col items-center py-5 px-10\">\r\n      <h1 className=\"font-bold text-2xl\">Quiz Create</h1>\r\n      <form\r\n        className=\"w-full flex flex-row gap-2 py-4\"\r\n        onSubmit={handleSubmit}\r\n      >\r\n        <div className=\"w-full h-16\">\r\n          <Select\r\n            label=\"Select category\"\r\n            onChange={(val) => {\r\n              setCategory(val || \"\");\r\n              setIsChoosedCategory(true);\r\n            }}\r\n            name=\"category\"\r\n            id=\"categorySelect\"\r\n            error={!isChoosedCategory}\r\n          >\r\n            {renderedCategories}\r\n          </Select>\r\n          {!isChoosedCategory ? <p className=\"text-sm text-red-600\">Please choose a category</p> : ''}\r\n        </div>\r\n        <div className=\"w-full h-16\">\r\n          <Select\r\n            label=\"Select difficulty\"\r\n            onChange={(val) => {\r\n              setDifficulty(val || \"\");\r\n              setIsChoosedDifficulty(true);\r\n            }}\r\n            id=\"difficultySelect\"\r\n            error={!isChoosedDifficulty}\r\n          >\r\n            {renderedDifficulties}\r\n          </Select>\r\n          {!isChoosedDifficulty ? <p className=\"text-sm text-red-600\">Please choose a difficulty</p> : ''}\r\n        </div>\r\n        <button\r\n          className=\"h-10 w-20 px-4 rounded-lg border border-gray-600 hover:bg-gray-200\"\r\n          id=\"createBtn\"\r\n          type=\"submit\"\r\n        >\r\n          Create\r\n        </button>\r\n      </form>\r\n      {!fetchQuizResult.isUninitialized && (\r\n        <QuizList\r\n          isLoading={fetchQuizResult?.isLoading || fetchQuizResult?.isFetching}\r\n          isError={fetchQuizResult?.isError}\r\n          quizzes={fetchQuizResult?.data?.results}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"],"names":["QuizListItem","_ref","renderedOptions","options","question","selectedOption","setSelectedOption","correctOption","length","map","option","optionClass","_jsx","Button","className","variant","color","onClick","undefined","children","he","Loading","_jsxs","shuffleArray","array","i","j","Math","floor","random","QuizList","isLoading","isError","quizzes","navigate","useNavigate","dispatch","useDispatch","selectedOptions","setSelectedOptions","useState","selectedCount","Object","keys","quizWithRandomOptions","setQuizWithRandomOptions","renderedQuizzes","useEffect","newQuizzes","quiz","correct_answer","incorrect_answers","shuffledOptions","push","index","handleOptionSelect","prevSelectedOptions","handleSubmitQuiz","quizziesWithRandomOptions","selected_answer","setQuizzies","QuizCreate","_fetchQuizResult$data","category","setCategory","difficulty","setDifficulty","isChoosedCategory","setIsChoosedCategory","isChoosedDifficulty","setIsChoosedDifficulty","renderedCategories","renderedDifficulties","DIFFICULTY_SELECT_LIST","Option","value","data","error","useFetchCategoriesQuery","trivia_categories","id","name","fetchQuiz","fetchQuizResult","useLazyFetchQuizQuery","onSubmit","e","preventDefault","isValid","Select","label","onChange","val","type","isUninitialized","isFetching","results"],"sourceRoot":""}