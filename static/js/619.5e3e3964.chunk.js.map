{"version":3,"file":"static/js/619.5e3e3964.chunk.js","mappings":"0KAIe,SAASA,EAAYC,GAMhC,IACEC,GAP+B,QACnCC,EAAO,SACPC,EAAQ,eACRC,EAAc,kBACdC,EAAiB,cACjBC,GACDN,EAiCC,OA3BEC,EAHGC,GAA8B,IAAnBA,EAAQK,OAGJL,EAAQM,KAAKC,IAC7B,IAAIC,EAAc,OAYlB,OAXAA,GACEN,IAAmBK,EAAS,2BAA6B,GACvDH,IACEA,IAAkBG,IACpBC,GAAe,4BAGdJ,IAAkBF,GAAkBA,IAAmBK,IACxDC,GAAe,4BAIjBC,EAAAA,EAAAA,KAACC,EAAAA,OAAM,CACLC,UAAWH,EACXI,QAAQ,WACRC,MAAM,QAENC,QAASX,EAAoB,IAAMA,EAAkBI,QAAUQ,EAAUC,SAExEC,IAAAA,OAAUV,IAHNA,EAIE,KAxBKE,EAAAA,EAAAA,KAACS,EAAAA,EAAO,KA8B1BC,EAAAA,EAAAA,MAAA,OAAKR,UAAU,2BAA0BK,SAAA,EACvCP,EAAAA,EAAAA,KAAA,KAAGE,UAAU,oBAAmBK,SAAEC,IAAAA,OAAUhB,MAC5CQ,EAAAA,EAAAA,KAAA,OAAKE,UAAU,iDAAgDK,SAC5DjB,MAIT,C,mGC9Ce,SAASqB,IACtB,MAAMC,GAAWC,EAAAA,EAAAA,KAAaC,GAAUA,EAAMC,KAAKH,WAEnD,IAAII,EAYFA,EAVGJ,GAAgC,IAApBA,EAAShB,OAUNgB,EAASf,KAAKkB,IAE5Bf,EAAAA,EAAAA,KAACZ,EAAAA,EAAY,CAEXG,QAASwB,EAAKxB,QACdC,SAAUuB,EAAKvB,SACfG,cAAeoB,EAAKE,eACpBxB,eAAgBsB,EAAKG,iBAJhBH,EAAKvB,aAXdkB,EAAAA,EAAAA,MAAA,OAAAH,SAAA,EACEP,EAAAA,EAAAA,KAAA,OAAKE,UAAU,YAAWK,SAAC,8BAC3BP,EAAAA,EAAAA,KAACmB,EAAAA,GAAI,CAACjB,UAAU,gCAAgCkB,GAAI,IAAIb,SAAC,iCAmB/D,MAAMc,EAAgBT,EAASU,QAAO,CAACC,EAAOC,IACxCA,EAAaP,iBAAmBO,EAAaN,gBACxCK,EAAQ,EAEVA,GACN,GAEH,IAAIE,EAAqB,qBAEvBA,GADEJ,EAAgB,EACI,aACK,IAAlBA,GAAyC,IAAlBA,EACV,gBAEA,eAExB,MAAMK,GACJhB,EAAAA,EAAAA,MAAA,OAAKR,UAAWuB,EAAmBlB,SAAA,CAAC,aAAWc,EAAc,eAI/D,OACEX,EAAAA,EAAAA,MAAA,OAAKR,UAAU,8CAA6CK,SAAA,EAC1DP,EAAAA,EAAAA,KAAA,MAAIE,UAAU,qBAAoBK,SAAC,iBACnCP,EAAAA,EAAAA,KAAA,OAAKE,UAAU,SAAQK,SAAES,KACzBhB,EAAAA,EAAAA,KAAA,OAAKE,UAAU,SAAQK,SAAsB,IAApBK,EAAShB,OAAe8B,EAAgB,MACjE1B,EAAAA,EAAAA,KAAA,OAAKE,UAAU,6BAA4BK,SACpB,IAApBK,EAAShB,QACRI,EAAAA,EAAAA,KAACmB,EAAAA,GAAI,CAACC,GAAI,IAAIb,UACZP,EAAAA,EAAAA,KAACC,EAAAA,OAAM,CAACC,UAAU,eAAeE,MAAM,OAAMG,SAAC,wBAKhD,OAKV,C","sources":["components/QuizListItem.js","pages/QuizResult.js"],"sourcesContent":["import { Button } from \"@material-tailwind/react\";\r\nimport he from \"he\";\r\nimport Loading from \"./Loading\";\r\n\r\nexport default function QuizListItem({\r\n  options,\r\n  question,\r\n  selectedOption,\r\n  setSelectedOption,\r\n  correctOption,\r\n}) {\r\n  let renderedOptions;\r\n\r\n  if (!options || options.length === 0) {\r\n    renderedOptions = <Loading />;\r\n  } else {\r\n    renderedOptions = options.map((option) => {\r\n      let optionClass = \"h-10\";\r\n      optionClass +=\r\n        selectedOption === option ? \" bg-green-300 text-white\" : \"\";\r\n      if (correctOption) {\r\n        if (correctOption === option) {\r\n          optionClass += \" bg-green-500 text-white\";\r\n        } \r\n\r\n        if(correctOption !== selectedOption && selectedOption === option) {\r\n          optionClass += \" bg-red-500 text-white\";\r\n        }\r\n      }\r\n      return (\r\n        <Button\r\n          className={optionClass}\r\n          variant=\"outlined\"\r\n          color=\"green\"\r\n          key={option}\r\n          onClick={setSelectedOption ? () => setSelectedOption(option) : undefined}\r\n        >\r\n          {he.decode(option)}\r\n        </Button>\r\n      );\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div className=\"flex flex-col gap-2 mt-4\">\r\n      <p className=\"font-bold text-xl\">{he.decode(question)}</p>\r\n      <div className=\"flex flex-row gap-2 items-center justify-start\">\r\n        {renderedOptions}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { useSelector } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport QuizListItem from \"../components/QuizListItem\";\r\nimport { Button } from \"@material-tailwind/react\";\r\n\r\nexport default function QuizResult() {\r\n  const quizzies = useSelector((state) => state.quiz.quizzies);\r\n\r\n  let renderedQuizzes;\r\n\r\n  if (!quizzies || quizzies.length === 0) {\r\n    renderedQuizzes = (\r\n      <div>\r\n        <div className=\"font-bold\">Please take a Quiz first</div>\r\n        <Link className=\"underline hover:text-gray-500\" to={\"/\"}>\r\n          Click here to take a quiz\r\n        </Link>\r\n      </div>\r\n    );\r\n  } else {\r\n    renderedQuizzes = quizzies.map((quiz) => {\r\n      return (\r\n        <QuizListItem\r\n          key={quiz.question}\r\n          options={quiz.options}\r\n          question={quiz.question}\r\n          correctOption={quiz.correct_answer}\r\n          selectedOption={quiz.selected_answer}\r\n        ></QuizListItem>\r\n      );\r\n    });\r\n  }\r\n\r\n  const numberOfScore = quizzies.reduce((total, currentValue) => {\r\n    if (currentValue.correct_answer === currentValue.selected_answer) {\r\n      return total + 1;\r\n    }\r\n    return total;\r\n  }, 0);\r\n\r\n  let renderedScoreClass = \"w-40 mx-auto px-2 \";\r\n  if (numberOfScore < 2) {\r\n    renderedScoreClass += \"bg-red-500\";\r\n  } else if (numberOfScore === 2 || numberOfScore === 3) {\r\n    renderedScoreClass += \"bg-yellow-500\";\r\n  } else {\r\n    renderedScoreClass += \"bg-green-500\";\r\n  }\r\n  const renderedScore = (\r\n    <div className={renderedScoreClass}>You score {numberOfScore} out of 5</div>\r\n  );\r\n\r\n\r\n  return (\r\n    <div className=\"flex flex-col items-center py-5 px-10 gap-6\">\r\n      <h1 className=\"font-bold text-2xl\">Quiz Result</h1>\r\n      <div className=\"w-full\">{renderedQuizzes}</div>\r\n      <div className=\"w-full\">{quizzies.length !== 0 ? renderedScore : \"\"}</div>\r\n      <div className=\"w-full flex justify-center\">\r\n        {quizzies.length !== 0 ? (\r\n          <Link to={\"/\"}>\r\n            <Button className=\"mx-auto w-64\" color=\"gray\">\r\n              Create a new Quiz\r\n            </Button>\r\n          </Link>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"names":["QuizListItem","_ref","renderedOptions","options","question","selectedOption","setSelectedOption","correctOption","length","map","option","optionClass","_jsx","Button","className","variant","color","onClick","undefined","children","he","Loading","_jsxs","QuizResult","quizzies","useSelector","state","quiz","renderedQuizzes","correct_answer","selected_answer","Link","to","numberOfScore","reduce","total","currentValue","renderedScoreClass","renderedScore"],"sourceRoot":""}